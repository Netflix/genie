ext {
    metaModelIgnorePattern = "**/com/netflix/genie/core/jpa/entities/*_.java"
}

dependencies {
    /*******************************
     * Compile Dependencies
     *******************************/

    compile project(":genie-common")

    // JSON Patch Support
    compile("com.github.fge:json-patch")

    // Commons Libs
    compile("commons-httpclient:commons-httpclient")
    compile("commons-io:commons-io")
    compile("org.apache.commons:commons-exec")

    // Hibernate Metamodel Generator Libraries
    compileOnly("org.hibernate:hibernate-jpamodelgen")

    // Netflix Libs
    compile("com.netflix.spectator:spectator-api")

    // Spring Libs
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.retry:spring-retry")
    compile("org.springframework.cloud:spring-cloud-aws-context")

    // AWS Libs
    compile("com.amazonaws:aws-java-sdk-sts")

    /*******************************
     * Provided Dependencies
     *******************************/

    /*******************************
     * Runtime Dependencies
     *******************************/

    // Database Libs
    runtime("com.h2database:h2")
    runtime("mysql:mysql-connector-java")
    runtime("org.postgresql:postgresql")

    /*******************************
     * Test Dependencies
     *******************************/

    testCompile(project(":genie-test"))
    testCompile("org.dbunit:dbunit")
    testCompile("com.github.springtestdbunit:spring-test-dbunit")
}

//Ignore the generated classes from all our style/coverage/bug finding tools
tasks.withType(Checkstyle) {
    exclude metaModelIgnorePattern
}

tasks.withType(FindBugs) {
    classes = classes.filter {
        !it.path.contains("_")
    }
}

tasks.withType(Pmd) {
    exclude metaModelIgnorePattern
}

test {
    jacoco {
        excludes = ["com/netflix/genie/core/jpa/entities/*_*"]
    }
}

jacocoTestReport {
    doFirst {
        classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(["com/netflix/genie/core/jpa/entities/*_*"])
    }
}

license {
  exclude "**/com/netflix/genie/core/jpa/entities/*_.java"
}
