plugins {
    id "com.moowork.node" version "1.2.0"
}

apply plugin: "org.asciidoctor.convert"

project.parent.tasks.collectDocumentation.dependsOn project.tasks.asciidoctor

ext {
    metaModelIgnorePattern = "**/com/netflix/genie/web/jpa/entities/*_.java"
    snippetsDir = new File(project.buildDir, "generated-snippets")
    static_build_dir = new File(project.projectDir, "/src/main/resources/static/build")
    static_project_dir = new File(project.projectDir, "/src/main/resources/static")
}

dependencies {
    /*******************************
     * Compile Dependencies
     *******************************/

    compile(project(":genie-common"))
    compile(project(":genie-proto"))

    compile("com.amazonaws:aws-java-sdk-sts")
    compile("com.github.fge:json-patch")
    compile("com.google.guava:guava")
    compile("commons-httpclient:commons-httpclient")
    compile("commons-io:commons-io")
    compile("commons-validator:commons-validator")
    compile("io.micrometer:micrometer-registry-atlas")
    compile("io.springfox:springfox-swagger2")
    compile("io.springfox:springfox-swagger-ui")
    compile("io.springfox:springfox-bean-validators")
    compile("javax.persistence:javax.persistence-api:2.2")
    compile("net.devh:grpc-server-spring-boot-autoconfigure")
    compile("net.devh:grpc-server-spring-boot-starter")
    compile("org.apache.commons:commons-exec")
    compile("org.apache.commons:commons-lang3")
    compile("org.apache.httpcomponents:httpclient")
    compile("org.bitbucket.b_c:jose4j")
    compile("org.flywaydb:flyway-core")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: "org.hibernate.javax.persistence"
    }
    compile("org.springframework.boot:spring-boot-starter-data-redis")
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("org.springframework.boot:spring-boot-starter-integration")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.cloud:spring-cloud-aws-context")
    compile("org.springframework.integration:spring-integration-zookeeper")
    compile("org.springframework.retry:spring-retry")
    compile("org.springframework.security:spring-security-jwt")
    compile("org.springframework.security.extensions:spring-security-saml2-core") {
        exclude group: "org.bouncycastle", module: "bcprov-jdk15"
    }
    compile("org.springframework.security.oauth:spring-security-oauth2")
    // TODO: Remove this as they move features into core spring security
    //       https://spring.io/blog/2018/01/30/next-generation-oauth-2-0-support-with-spring-security
    compile("org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure")
    compile("org.springframework.session:spring-session-core")

    /*******************************
     * Provided Dependencies
     *******************************/

    /*******************************
     * Optional Dependencies
     *******************************/

    compileOnly("org.hibernate:hibernate-jpamodelgen")
    compileOnly("org.springframework.boot:spring-boot-configuration-processor")

    /*******************************
     * Runtime Dependencies
     *******************************/

    runtime("com.h2database:h2")
    runtime("mysql:mysql-connector-java")
    runtime("org.codehaus.groovy:groovy-all")
    runtime("org.postgresql:postgresql")
    runtime("org.springframework.session:spring-session-data-redis")

    /*******************************
     * Test Dependencies
     *******************************/

    testCompile(project(":genie-test"))
    testCompile("com.github.springtestdbunit:spring-test-dbunit")
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("net.sf.jtidy:jtidy")
    testCompile("org.apache.tomcat:tomcat-jdbc")
    testCompile("org.dbunit:dbunit")
    testCompile("org.springframework.boot:spring-boot-starter-jetty")
    testCompile("org.springframework.cloud:spring-cloud-contract-wiremock")
    testCompile("org.springframework.restdocs:spring-restdocs-core")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
    testCompile("org.springframework.restdocs:spring-restdocs-restassured")
    testCompile("org.springframework.security:spring-security-test")
    testCompile("io.grpc:grpc-testing")
}

license {
    exclude "static/*"
    exclude "templates/*"
    exclude "*.yml"
    exclude "genie-banner.txt"
    exclude "db/**/*.sql"
    exclude "**/com/netflix/genie/web/jpa/entities/*_.java"
}

test {
    outputs.dir snippetsDir
}

// This is needed cause some things like attributes for asciidoctor don't serialize project.version properly at runtime
def genieVersion = project.version.toString()

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    attributes    \
               "snippets": snippetsDir,
            "revnumber": genieVersion,
            "docinfo1": ""

    // See: https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/154
    def capturedOutput = []
    def listener = { capturedOutput << it } as StandardOutputListener

    logging.addStandardErrorListener(listener)
    logging.addStandardOutputListener(listener)

    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        capturedOutput.join('').with { output ->
            if (output =~ /include file not found:/) {
                throw new RuntimeException("Include file(s) not found.\n" + output)
            }
        }
    }
}

processResources {
    from("src/main/resources") {
        include "**/*.properties"
        include "**/*.yml"
        filter {
            it.replace("GENIE_VERSION", genieVersion)
        }
    }
}

compileJava {
    dependsOn processResources
}

node {
    version = "4.4.0"
    npmVersion = "3.8.6"
    download = true
}

clean {
    delete static_build_dir
}

task bundle(type: NpmTask) {
    inputs.files(fileTree("node_modules"))
    inputs.file("npm-shrinkwrap.json")
    inputs.file("package.json")
    inputs.file("server.js")
    inputs.file("webpack.config.js")
    inputs.dir static_project_dir

    outputs.dir static_build_dir

    dependsOn npm_install
    args = ["run", "build"]
}

npm_install.args = ["--loglevel", "error"]
npmInstall.args = ["--loglevel", "error"]

jar {
    dependsOn bundle

    manifest {
        attributes("Implementation-Version": genieVersion)
    }

    from(static_build_dir) {
        into "static"
    }
}

//Ignore the generated classes from all our style/coverage/bug finding tools
tasks.withType(Checkstyle) {
    exclude metaModelIgnorePattern
}

tasks.withType(Pmd) {
    exclude metaModelIgnorePattern
}
