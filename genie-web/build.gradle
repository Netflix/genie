import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: "org.asciidoctor.jvm.convert"

project.parent.tasks.collectDocumentation.dependsOn project.tasks.asciidoctor

ext {
    metaModelIgnorePattern = "**/com/netflix/genie/web/data/entities/*_.java"
    snippetsDir = new File(project.buildDir, "generated-snippets")
}

configurations {
    genieAgent
}

dependencies {
    /*******************************
     * Annotation Processors
     *******************************/

    annotationProcessor("org.hibernate:hibernate-jpamodelgen")
    annotationProcessor("org.springframework.boot:spring-boot-autoconfigure-processor")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    /*******************************
     * Compile Dependencies
     *******************************/

    // TODO: Switch to java-library plugin

    compile(project(":genie-common"))
    compile(project(":genie-common-internal"))
    compile(project(":genie-proto"))

    compile("com.amazonaws:aws-java-sdk-sts")
    compile("com.github.ben-manes.caffeine:caffeine")
    compile("com.github.fge:json-patch")
    compile("com.google.guava:guava")
    compile("commons-codec:commons-codec")
    compile("commons-httpclient:commons-httpclient")
    compile("commons-io:commons-io")
    compile("commons-validator:commons-validator")
    compile("io.grpc:grpc-core")
    compile("io.grpc:grpc-netty")
    compile("io.grpc:grpc-protobuf")
    compile("io.grpc:grpc-stub")
    compile("io.springfox:springfox-swagger2")
    compile("io.springfox:springfox-swagger-ui")
    compile("io.springfox:springfox-bean-validators")
    compile("javax.persistence:javax.persistence-api")
    compile("org.apache.commons:commons-exec")
    compile("org.apache.commons:commons-lang3")
    compile("org.apache.httpcomponents:httpclient")
    compile("org.bitbucket.b_c:jose4j")
    compile("org.flywaydb:flyway-core")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: "org.hibernate.javax.persistence"
    }
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("org.springframework.boot:spring-boot-starter-integration")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.cloud:spring-cloud-starter-aws")
    compile("org.springframework.cloud:spring-cloud-starter-aws-messaging")
    compile("org.springframework.cloud:spring-cloud-starter-zookeeper")
    compile("org.springframework.integration:spring-integration-zookeeper")
    compile("org.springframework.retry:spring-retry")
    compile("org.apache.maven:maven-artifact") {
        transitive = false
    }

    /*******************************
     * Provided Dependencies
     *******************************/

    /*******************************
     * Optional Dependencies
     *******************************/

    /*******************************
     * Runtime Dependencies
     *******************************/

    runtimeOnly("com.h2database:h2")
    runtimeOnly("mysql:mysql-connector-java")
    runtimeOnly("org.codehaus.groovy:groovy-all")
    runtimeOnly("org.postgresql:postgresql")

    /*******************************
     * Test Dependencies
     *******************************/

    testCompile(project(":genie-test"))
    testCompile(project(":genie-test-web"))
    testCompile("com.github.springtestdbunit:spring-test-dbunit")
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("net.sf.jtidy:jtidy")
    testCompile("org.apache.tomcat:tomcat-jdbc")
    testCompile("org.dbunit:dbunit")
    testCompile("org.springframework.boot:spring-boot-starter-jetty")
    testCompile("org.springframework.cloud:spring-cloud-contract-wiremock")
    testCompile("org.springframework.restdocs:spring-restdocs-core")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
    testCompile("org.springframework.restdocs:spring-restdocs-restassured")
    testCompile("io.grpc:grpc-testing")

    /*******************************
     * Agent Dependencies
     *******************************/

    genieAgent(project(path: ":genie-agent-app", configuration: "agentBootJar"))
}

license {
    exclude "*.yml"
    exclude "META-INF/spring.factories"
    exclude "genie-banner.txt"
    exclude "db/**/*.sql"
    exclude "**/com/netflix/genie/web/data/entities/*_.java"
}

integrationTest {
    dependsOn project.findProject(":genie-agent-app").tasks.bootJar
    outputs.dir snippetsDir
    systemProperty("genie.agent.launcher.local.agent-jar-path", "${configurations.genieAgent.asPath}")
}

// This is needed cause some things like attributes for asciidoctor don't serialize project.version properly at runtime
def genieVersion = project.version.toString()

asciidoctor {
    dependsOn integrationTest
    baseDirFollowsSourceDir()
    inputs.dir snippetsDir

    // See: https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/154
    def capturedOutput = []
    def listener = { capturedOutput << it } as StandardOutputListener

    logging.addStandardErrorListener(listener)
    logging.addStandardOutputListener(listener)

    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        capturedOutput.join('').with { output ->
            if (output =~ /include file not found:/) {
                throw new RuntimeException("Include file(s) not found.\n" + output)
            }
        }
    }
}

asciidoctorj {
    attributes(["snippets": snippetsDir, "revnumber": genieVersion, "docinfo1": ""])
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
        )
    }
}

//Ignore the generated classes from all our style/coverage/bug finding tools
tasks.withType(Checkstyle) {
    exclude metaModelIgnorePattern
}

tasks.withType(Pmd) {
    exclude metaModelIgnorePattern
}

processResources {
    filesMatching("**/*.yml") {
        filter ReplaceTokens, tokens: [
                "genie.version": project.version.toString()
        ]
    }
}
