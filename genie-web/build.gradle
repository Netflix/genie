apply plugin: "org.asciidoctor.convert"

project.parent.tasks.collectDocumentation.dependsOn project.tasks.asciidoctor

ext {
    metaModelIgnorePattern = "**/com/netflix/genie/web/jpa/entities/*_.java"
    snippetsDir = new File(project.buildDir, "generated-snippets")
}

dependencies {
    /*******************************
     * Compile Dependencies
     *******************************/

    compile(project(":genie-common"))
    compile(project(":genie-common-internal"))
    compile(project(":genie-proto"))

    compile("com.amazonaws:aws-java-sdk-sts")
    compile("com.github.fge:json-patch")
    compile("com.google.guava:guava")
    compile("commons-codec:commons-codec")
    compile("commons-httpclient:commons-httpclient")
    compile("commons-io:commons-io")
    compile("commons-validator:commons-validator")
    compile("io.springfox:springfox-swagger2")
    compile("io.springfox:springfox-swagger-ui")
    compile("io.springfox:springfox-bean-validators")
    compile("javax.persistence:javax.persistence-api:2.2")
    compile("net.devh:grpc-server-spring-boot-autoconfigure")
    compile("net.devh:grpc-server-spring-boot-starter")
    compile("org.apache.commons:commons-exec")
    compile("org.apache.commons:commons-lang3")
    compile("org.apache.httpcomponents:httpclient")
    compile("org.bitbucket.b_c:jose4j")
    compile("org.flywaydb:flyway-core")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: "org.hibernate.javax.persistence"
    }
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("org.springframework.boot:spring-boot-starter-integration")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.cloud:spring-cloud-starter-aws")
    compile("org.springframework.cloud:spring-cloud-starter-zookeeper")
    compile("org.springframework.integration:spring-integration-zookeeper")
    compile("org.springframework.retry:spring-retry")

    /*******************************
     * Provided Dependencies
     *******************************/

    /*******************************
     * Optional Dependencies
     *******************************/

    compileOnly("org.hibernate:hibernate-jpamodelgen")
    compileOnly("org.springframework.boot:spring-boot-configuration-processor")

    /*******************************
     * Runtime Dependencies
     *******************************/

    runtime("com.h2database:h2")
    runtime("mysql:mysql-connector-java")
    runtime("org.codehaus.groovy:groovy-all")
    runtime("org.postgresql:postgresql")

    /*******************************
     * Test Dependencies
     *******************************/

    testCompile(project(":genie-test"))
    testCompile(project(":genie-test-web"))
    testCompile("com.github.springtestdbunit:spring-test-dbunit")
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("net.sf.jtidy:jtidy")
    testCompile("org.apache.tomcat:tomcat-jdbc")
    testCompile("org.dbunit:dbunit")
    testCompile("org.springframework.boot:spring-boot-starter-jetty")
    testCompile("org.springframework.cloud:spring-cloud-contract-wiremock")
    testCompile("org.springframework.restdocs:spring-restdocs-core")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
    testCompile("org.springframework.restdocs:spring-restdocs-restassured")
    testCompile("io.grpc:grpc-testing")
}

license {
    exclude "*.yml"
    exclude "META-INF/spring.factories"
    exclude "genie-banner.txt"
    exclude "db/**/*.sql"
    exclude "**/com/netflix/genie/web/jpa/entities/*_.java"
}

test {
    outputs.dir snippetsDir
}

// This is needed cause some things like attributes for asciidoctor don't serialize project.version properly at runtime
def genieVersion = project.version.toString()

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    attributes       \
                  "snippets": snippetsDir,
            "revnumber": genieVersion,
            "docinfo1": ""

    // See: https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/154
    def capturedOutput = []
    def listener = { capturedOutput << it } as StandardOutputListener

    logging.addStandardErrorListener(listener)
    logging.addStandardOutputListener(listener)

    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        capturedOutput.join('').with { output ->
            if (output =~ /include file not found:/) {
                throw new RuntimeException("Include file(s) not found.\n" + output)
            }
        }
    }
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
        )
    }
}

//Ignore the generated classes from all our style/coverage/bug finding tools
tasks.withType(Checkstyle) {
    exclude metaModelIgnorePattern
}

tasks.withType(Pmd) {
    exclude metaModelIgnorePattern
}
