apply plugin: "spring-boot"

dependencies {
    /*******************************
     * Compile Dependencies
     *******************************/

    compile(project(":genie-web"))

    /*******************************
     * Provided Dependencies
     *******************************/

    /*******************************
     * Optional Dependencies
     *******************************/

    /*******************************
     * Runtime Dependencies
     *******************************/

    /*******************************
     * Test Dependencies
     *******************************/
}

jar {
    manifest {
        attributes("Implementation-Version": version)
    }
}

springBoot {
    layout = "ZIP"
    mainClass = "com.netflix.genie.GenieWeb"
}

def env = project.hasProperty("env") ? project.getProperty("env") : "dev"

bootRun {
    addResources = false
    systemProperty "spring.profiles.active", env
}

def dockerDir = new File(project.buildDir, "/docker")

def isLatest() {
    return (boolean) !project.version.toString().contains("SNAPSHOT") && !project.version.toString().contains("-rc.")
}

def getTags(String appName) {
    def tags = ["netflixoss/${appName}:${project.version}"]
    if (isLatest()) {
        tags.add("netflixoss/${appName}:latest")
    }
    return tags
}

task dockerCreateInputDir(type: Copy, group: "Docker", description: "Stage all the necessary files docker image") {
    dependsOn tasks.jar, tasks.bootRepackage
    from tasks.jar
    from new File(project.projectDir, "src/main/docker/Dockerfile")
    into dockerDir
}

task dockerBuildImage(type: Exec, group: "Docker", description: "Build docker image based on the Dockerfile") {
    dependsOn tasks.dockerCreateInputDir
    workingDir dockerDir

    def appName = jar.baseName.toString()

    def commandArgs = new ArrayList<>()
    commandArgs.add("docker")
    commandArgs.add("build")
    commandArgs.add("--force-rm")
    commandArgs.add("--build-arg")
    commandArgs.add("JAR_NAME=${appName}")
    commandArgs.add("--build-arg")
    commandArgs.add("VERSION=${project.version}")
    for (String tag : getTags(appName)) {
        commandArgs.add("-t")
        commandArgs.add(tag)
    }
    commandArgs.add(".")

    commandLine commandArgs
}

task dockerLogout(type: Exec, group: "Docker", description: "Logout of docker hub") {
    commandLine "docker", "logout"
}

task dockerLogin(type: Exec, group: "Docker", description: "Login to docker hub using DOCKER_USER and DOCKER_PASSWORD environment variables") {
    dependsOn tasks.dockerLogout
    commandLine "docker", "login", "-u", System.getenv("DOCKER_USER"), "-p", System.getenv("DOCKER_PASSWORD")
}

task dockerPush(group: "Docker", description: "Push the built docker image to Docker Hub") {
    dependsOn tasks.dockerLogin, tasks.dockerBuildImage
    onlyIf {
        System.env."CI"
    }
    doLast {
        def appName = jar.baseName.toString()
        for (String tag : getTags(appName)) {
            exec {
                commandLine "docker", "push", tag
            }
        }
    }
}
