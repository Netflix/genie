buildscript {
    repositories {
        gradlePluginPortal()
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:6.0.4'
        classpath 'org.ajoberstar.grgit:grgit-gradle:3.0.0-beta.1'
        classpath 'org.ajoberstar:gradle-git-publish:1.0.1'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.8'
        classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2'
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
        classpath 'io.franzbecker:gradle-lombok:1.14'
    }
}
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'nebula.netflixoss'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.ajoberstar.git-publish'
apply plugin: "nebula-aggregate-javadocs"

ext.githubProjectName = rootProject.name

def javaProjects = subprojects.findAll {
    it.name != "genie-demo" && it.name != "genie-ddl" && it.name != "genie-docs"
}

allprojects {
    apply plugin: "jacoco"
    apply plugin: "idea"
    apply plugin: "eclipse"

    repositories {
        jcenter()
    }
}

idea {
    project {
        jdkName = "1.8"
        languageLevel = "1.8"
        vcs = "Git"
    }
}

configure(javaProjects) {
    apply plugin: "nebula.netflixoss"
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "findbugs"
    apply plugin: "pmd"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "com.gorylenko.gradle-git-properties"
    apply plugin: "groovy"
    apply plugin: "io.franzbecker.gradle-lombok"

    group = "com.netflix.${githubProjectName}"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencyManagement {
        imports {
            mavenBom "io.spring.platform:platform-bom:${spring_platform_version}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}"
        }
        dependencies {
            dependency("com.beust:jcommander:1.72")
            dependency("cglib:cglib-nodep:3.2.6")
            dependency("com.github.fge:json-patch:1.9")
            dependency("com.github.springtestdbunit:spring-test-dbunit:1.3.0")
            dependencySet(group: "com.squareup.retrofit2", version: "2.1.0") {
                entry "retrofit"
                entry "converter-jackson"
            }
            dependency("com.google.code.findbugs:annotations:3.0.1")
            dependencySet(group: "com.google.protobuf", version: "3.5.1") {
                entry "protobuf-java"
                entry "protoc"
            }
            dependency("commons-validator:commons-validator:1.6")
            dependencySet(group: "io.grpc", version: "1.12.0") {
                entry "grpc-core"
                entry "grpc-netty"
                entry "grpc-stub"
                entry "grpc-protobuf"
                entry "protoc-gen-grpc-java"
                entry "grpc-testing"
            }
            dependencySet(group: "io.springfox", version: "2.9.2") {
                entry "springfox-swagger2"
                entry "springfox-swagger-ui"
                entry "springfox-bean-validators"
            }
            dependency("javax.persistence:javax.persistence-api:2.2")
            dependencySet(group: "net.devh", version: "2.0.1.RELEASE") {
                entry "grpc-server-spring-boot-autoconfigure"
                entry "grpc-server-spring-boot-starter"
            }
            dependency("net.sf.jtidy:jtidy:r938")
            dependency("org.apache.commons:commons-configuration2:2.2")
            dependency("org.apache.commons:commons-exec:1.3")
            // For some reason 3.5.3-beta was throwing error with 3.4.x server
            // https://issues.apache.org/jira/browse/ZOOKEEPER-2775
            // https://curator.apache.org/zk-compatibility.html
            dependency("org.apache.zookeeper:zookeeper:3.4.12")
            dependency("org.bitbucket.b_c:jose4j:0.6.3")
            dependency("org.codehaus.janino:janino:2.5.16")
            dependency("org.dbunit:dbunit:2.5.4")
            dependencySet(group: "org.jruby", version: "9.1.14.0") {
                entry "jruby-complete"
                entry "jruby-core"
                entry "jruby-stdlib"
            }
            dependency("org.opensaml:opensaml:2.6.4")
            dependency("org.python:jython-standalone:2.7.1")
            dependencySet(group: "org.spockframework", version: "1.2-groovy-2.4") {
                entry "spock-core"
                entry "spock-spring"
            }
            // NOTE: Updating this to 1.0.4 introduces another dependency not in Maven central:
            //       https://spring.io/blog/2018/03/16/spring-security-saml-1-0-4-released
            //       For now staying on 1.0.3 as not really thrilled with adding yet another maven repo
            dependency("org.springframework.security.extensions:spring-security-saml2-core:1.0.3.RELEASE")
            dependency("org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.1.RELEASE")
            dependencySet(group: "org.springframework.statemachine", version: "2.0.2.RELEASE") {
                entry "spring-statemachine-core"
                entry "spring-statemachine-test"
            }
        }
    }

    ext {
        generatedSourcesDir = file("${buildDir}/generated-sources/main")
        generatedSourcesJavaDir = file(new File(generatedSourcesDir, "/java"))
        generatedSourcesGRPCDir = file("${buildDir}/generated-grpc")
        generatedSourcesGRPCJavaDir = file(new File(generatedSourcesGRPCDir, "/main/java"))
    }

    sourceSets {
        main {
            java {
                srcDir generatedSourcesJavaDir
                srcDir generatedSourcesGRPCJavaDir
            }
        }
    }

    idea.module {
        // Exclude JPA metamodels, as IDEA generates its own
        sourceDirs -= generatedSourcesJavaDir
    }

    configurations {
        all*.exclude group: "javax.servlet", module: "servlet-api"
    }

    dependencies {
        /*******************************
         * Annotation Processors
         *******************************/

        annotationProcessor("com.google.code.findbugs:annotations")

        /*******************************
         * Compile Dependencies
         *******************************/

        /*******************************
         * Provided Dependencies
         *******************************/

        compileOnly("com.google.code.findbugs:annotations")

        /*******************************
         * Runtime Dependencies
         *******************************/

        /*******************************
         * Test Dependencies
         *******************************/

        testAnnotationProcessor("com.google.code.findbugs:annotations")

        testCompile("cglib:cglib-nodep")
        testCompile("org.spockframework:spock-core")
        testCompile("org.spockframework:spock-spring")
        testCompile("org.springframework.boot:spring-boot-starter-test")

        testCompileOnly("com.google.code.findbugs:annotations")

        testRuntime("javax.el:javax.el-api")
        testRuntime("org.glassfish:javax.el")
    }

    task unitTests(type: Test, group: "verification") {
        useJUnit {
            includeCategories "com.netflix.genie.test.categories.UnitTest"
            excludeCategories "com.netflix.genie.test.categories.IntegrationTest"
            excludeCategories "com.netflix.genie.test.categories.DocumentationTest"
        }
        outputs.upToDateWhen {
            return false
        }
    }

    task integrationTests(type: Test, group: "verification") {
        useJUnit {
            includeCategories "com.netflix.genie.test.categories.IntegrationTest"
            excludeCategories "com.netflix.genie.test.categories.UnitTest"
            excludeCategories "com.netflix.genie.test.categories.DocumentationTest"
        }
        outputs.upToDateWhen {
            return false
        }
    }

    task documentationTests(type: Test, group: "verification") {
        useJUnit {
            includeCategories "com.netflix.genie.test.categories.DocumentationTest"
            excludeCategories "com.netflix.genie.test.categories.UnitTest"
            excludeCategories "com.netflix.genie.test.categories.IntegrationTest"
        }
        outputs.upToDateWhen {
            return false
        }
    }

    task removeGeneratedSources(type: Delete) {
        generatedSourcesDir.deleteDir()
    }

    task removeIdeaOutDirectory(type: Delete) {
        file("${projectDir}/out").deleteDir()
    }

    clean {
        dependsOn(removeIdeaOutDirectory)
    }

    compileJava {
        doFirst {
            generatedSourcesDir.mkdirs()
            generatedSourcesJavaDir.mkdirs()
            generatedSourcesGRPCJavaDir.mkdirs()
        }
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.compilerArgs += ['-s', generatedSourcesJavaDir]
    }

    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    tasks.withType(Test) {
        task ->
            // set heap size for the test JVM(s)
            minHeapSize = "256m"
            maxHeapSize = "2g"

            // Environment properties to be forwarded to the test runtime
            [
                    "CI",
                    "INTEGRATION_TEST_DB",
            ].each { envVariableName ->
                if (System.getenv(envVariableName) != null) {
                    systemProperty envVariableName, System.getenv(envVariableName)
                }
            }

            reports.html.setDestination(new File("${reporting.baseDir}/test/${task.name}"))
            jacocoTestReport.executionData += files("$buildDir/jacoco/${task.name}.exec")
    }

    test {
        testLogging {
            if (System.getenv("CI") != null) {
                events "passed", "skipped", "failed"
            } else {
                events "failed"
            }
        }
    }

    license {
        ignoreFailures false
    }

    checkstyle {
        configFile = new File(project.parent.projectDir, "codequality/checkstyle/checkstyle.xml")
    }

    findbugs {
        excludeFilter = new File(project.parent.projectDir, "codequality/findbugs/excludeFilter.xml")
    }

    tasks.withType(Pmd) {
        reports.html.enabled true
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    lombok {
        version = "1.18.2"
    }
}

/**********************************
 * Coverage Tasks
 **********************************/

task codeCoverageReport(type: JacocoReport, group: "Coverage reports") {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    dependsOn javaProjects*.test

    javaProjects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination new File("${buildDir}/reports/jacoco/html")
        csv.enabled = false
    }
    afterEvaluate {
        // Exclude generated files from top-level coverage report
        classDirectories = files(
                classDirectories.files.collect {
                    fileTree(
                            dir: it,
                            exclude: [
                                    "**/com/netflix/genie/proto/**",
                                    "**/com/netflix/genie/web/jpa/entities/*_*",
                            ]
                    )
                }
        )
    }
}

coveralls {
    sourceDirs = javaProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${project.buildDir}/reports/jacoco/report.xml"
}

tasks.coveralls {
    group = "Coverage reports"
    description = "Uploads the aggregated coverage report to Coveralls"

    dependsOn codeCoverageReport
    onlyIf {
        System.env."CI"
    }
}

/**********************************
 * Github Pages Tasks
 **********************************/

task collectDocumentation(group: "documentation", description: "Copy the documentation from sub-projects") {
    dependsOn "aggregateJavadocs"

    def restDocs = new File(project(":genie-web").buildDir, "asciidoc/html5")
    def referenceDocs = new File(project(":genie-docs").buildDir, "asciidoc/html5")
    def demoDocs = new File(project(":genie-demo").buildDir, "asciidoc/html5")
    def dockerCompose = new File(project(":genie-demo").projectDir, "src/main/docker/docker-compose.yml")
    def docsDir = new File(project.buildDir, "docs")

    inputs.dir restDocs
    inputs.dir referenceDocs
    inputs.dir demoDocs
    inputs.file dockerCompose
    outputs.dir docsDir

    doLast {
        copy {
            from dockerCompose
            into new File(docsDir, "demo")
            filter {
                it.replace('${GENIE_VERSION}', project.version.toString())
            }
        }
        copy {
            from restDocs
            into new File(docsDir, "rest")
        }
        copy {
            from referenceDocs
            into new File(docsDir, "reference")
        }
        copy {
            from demoDocs
            into new File(docsDir, "demo")
        }
    }
}

gitPublish {

    branch = "gh-pages"

    contents {
        into("docs/${project.version}/") {
            from "${project.buildDir}/docs/"
        }
        into("_releases") {
            from new File(project(":genie-docs").projectDir, "src/templates/releaseTemplate.md")
            rename {
                String fileName -> fileName.replace("releaseTemplate", "${project.version}")
            }
            filter {
                it.replace("GENIE_VERSION", project.version.toString())
            }
        }
    }

    preserve {
        "**/*"
    }

    commitMessage = "Documentation generated for ${project.version} by Travis Build ${System.env.TRAVIS_BUILD_NUMBER}".toString()
}

gitPublishCopy {
    // This also depends on asciidoctor task for some sub-projects but that dependency is reverse mapped in the
    // pertinent sub-project build file
    dependsOn tasks.collectDocumentation
}

gitPublishPush {
    onlyIf {
        System.env."CI"
    }
}

/**********************************
 * Docker Tasks
 **********************************/

def isLatest() {
    return (boolean) !project.version.toString().contains("SNAPSHOT") && !project.version.toString().contains("-rc.")
}

def getDockerTags(String appName) {
    def tags = ["netflixoss/${appName}:${project.version}"]
    if (isLatest()) {
        tags.add("netflixoss/${appName}:latest")
    }
    return tags
}

task dockerLogout(type: Exec, group: "Docker", description: "Logout of docker hub") {
    commandLine "docker", "logout"
}

task dockerLogin(type: Exec, group: "Docker", description: "Login to docker hub using DOCKER_USER and DOCKER_PASSWORD environment variables") {
    dependsOn tasks.dockerLogout
    commandLine "docker", "login", "-u", System.getenv("DOCKER_USER"), "-p", System.getenv("DOCKER_PASSWORD")
}

task dockerBuildAllImages(group: "Docker", description: "Container task for all docker image builds") {
    dependsOn ":genie-app:dockerBuildAppImage"
    dependsOn ":genie-demo:dockerBuildApacheImage"
    dependsOn ":genie-demo:dockerBuildClientImage"
    dependsOn ":genie-war:dockerBuildWarImage"
}
