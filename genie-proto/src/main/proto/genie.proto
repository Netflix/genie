syntax = "proto3";

package com.netflix.genie.proto;

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "com.netflix.genie.proto";
option java_outer_classname = "GenieProto";

// The Ping service definition.
service PingService {

    // Sends a greeting
    rpc ping (PingRequest) returns (PongResponse) {
    }
}

// The Ping request with client metadata.
message PingRequest {
    string request_id = 1;
    string source_name = 2;
    google.protobuf.Timestamp timestamp = 3;
    map<string, string> client_metadata = 4;
}

// The server response with server metadata.
message PongResponse {
    string request_id = 1;
    google.protobuf.Timestamp timestamp = 2;
    map<string, string> server_metadata = 3;
}

// Job Service
service JobService {
    rpc handshake (HandshakeRequest) returns (HandshakeResponse);
    rpc reserveJobId (ReserveJobIdRequest) returns (ReserveJobIdResponse);
    rpc resolveJobSpecification (JobSpecificationRequest) returns (JobSpecificationResponse);
    rpc getJobSpecification (JobSpecificationRequest) returns (JobSpecificationResponse);
    rpc resolveJobSpecificationDryRun (DryRunJobSpecificationRequest) returns (JobSpecificationResponse);
    rpc claimJob (ClaimJobRequest) returns (ClaimJobResponse);
    rpc changeJobStatus (ChangeJobStatusRequest) returns (ChangeJobStatusResponse);
}

message JobMetadata {
    string id = 1;
    string name = 2;
    string user = 3;
    string version = 4;
    string description = 5;
    repeated string tags = 6;
    string metadata = 7;
    string email = 8;
    string grouping = 9;
    string grouping_instance = 10;
    string setup_file = 11;
    repeated string configs = 12;
    repeated string dependencies = 13;
    repeated string command_args = 14;
}

message Criterion {
    repeated string tags = 1;
    string id = 2;
    string name = 3;
    string status = 4;
    string version = 5;
}

message ExecutionResourceCriteria {
    repeated Criterion cluster_criteria = 1;
    Criterion command_criterion = 2;
    repeated string requested_application_id_overrides = 3;
}

message AgentConfig {
    bool is_interactive = 1;
    string job_directory_location = 2;
}

message JobArchivalData {
    string requested_archive_location_prefix = 1;
}

message HandshakeRequest {
    AgentMetadata agent_metadata = 1;
}

message HandshakeResponse {
    enum Type {
      UNKNOWN = 0;
      ALLOWED = 1;
      REJECTED = 2;
      SERVER_ERROR = 3;
      INVALID_REQUEST = 4;
    }
    Type type = 1;
    string message = 2;
}

message ReserveJobIdRequest {
    JobMetadata metadata = 1;
    ExecutionResourceCriteria criteria = 2;
    AgentConfig agent_config = 3;
    AgentMetadata agent_metadata = 4;
    JobArchivalData job_archival_data = 5;
}

message ReserveJobIdError {
    enum Type {
        UNKNOWN = 0;
        ID_NOT_AVAILABLE = 1;
        INVALID_REQUEST = 2;
        SERVER_ERROR = 3;
    }
    Type type = 1;
    string message = 2;
}

message ReserveJobIdResponse {
    oneof response {
        string id = 1;
        ReserveJobIdError error = 2;
    }
}

message JobSpecificationRequest {
    string id = 1;
}

message DryRunJobSpecificationRequest {
    JobMetadata metadata = 1;
    ExecutionResourceCriteria criteria = 2;
    AgentConfig agent_config = 3;
    JobArchivalData job_archival_data = 4;
}

message ExecutionResource {
    string id = 1;
    string setup_file = 2;
    repeated string configs = 3;
    repeated string dependencies = 4;
}

message JobSpecification {
    repeated string command_args = 1;
    ExecutionResource job = 2;
    ExecutionResource cluster = 3;
    ExecutionResource command = 4;
    repeated ExecutionResource applications = 5;
    map<string, string> environment_variables = 6;
    bool is_interactive = 7;
    string job_directory_location = 8;
    string archive_location = 9;
}

message JobSpecificationError {
    enum Type {
        UNKNOWN = 0;
        NO_CLUSTER_FOUND = 1;
        NO_COMMAND_FOUND = 2;
        NO_APPLICATION_FOUND = 3;
        NO_JOB_FOUND = 4;
        NO_SPECIFICATION_FOUND = 5;
        INVALID_REQUEST = 6;
    }
    Type type = 1;
    string message = 2;
}

message JobSpecificationResponse {
    oneof response {
        JobSpecification specification = 1;
        JobSpecificationError error = 2;
    }
}

message AgentMetadata {
    string agent_version = 1;
    string agent_hostname = 2;
    int32 agent_pid = 3;
}

message ClaimJobRequest {
    string id = 1;
    AgentMetadata agent_metadata = 2;
}

message ClaimJobError {
    enum Type {
        UNKNOWN = 0;
        ALREADY_CLAIMED = 1;
        NO_SUCH_JOB = 2;
        INVALID_REQUEST = 3;
        INVALID_STATUS = 4;
    }
    Type type = 1;
    string message = 2;
}

message ClaimJobResponse {
    bool successful = 1;
    ClaimJobError error = 2;
}

message ChangeJobStatusRequest {
    string id = 1;
    string current_status = 2;
    string new_status = 3;
    string new_status_message = 4;
}

message ChangeJobStatusError {
    enum Type {
        UNKNOWN = 0;
        INVALID_REQUEST = 1;
        INCORRECT_CURRENT_STATUS = 2;
        NO_SUCH_JOB = 3;
    }
    Type type = 1;
    string message = 2;
}

message ChangeJobStatusResponse {
    bool successful = 1;
    ChangeJobStatusError error = 2;
}

//--------------------------------------------------------------------
// HeartBeat Service
//
// This service is keeps track of persistent connections from agents
// to a server, detects disconnections and provides routing
// information for requests that flow from the cluster to agents.
//--------------------------------------------------------------------

service HeartBeatService {
    rpc heartbeat (stream AgentHeartBeat) returns (stream ServerHeartBeat);
}

message AgentHeartBeat {
    string claimed_job_id = 1;
}

message ServerHeartBeat {
}

service JobKillService {
    rpc registerForKillNotification (JobKillRegistrationRequest) returns (JobKillRegistrationResponse);
}

message JobKillRegistrationRequest {
    string job_id = 1;
}

message JobKillRegistrationResponse {
}
